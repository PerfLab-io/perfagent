import type { TraceEvent } from "./types"

// Enhanced mock trace data with longer timespan and deeper call stacks
export const mockTraceData: TraceEvent[] = [
  // Main user interaction event - spans almost the entire trace (10 seconds)
  {
    name: "Page Load",
    cat: "input",
    ph: "X",
    ts: 1000000,
    pid: 1,
    tid: 1,
    dur: 9800000, // Almost 10 seconds
    args: {
      data: {
        type: "load",
        url: "https://example.com",
      },
    },
    sourceScript: "main.js",
  },

  // First major phase - Initial Rendering (2 seconds)
  {
    name: "Initial Rendering",
    cat: "rendering",
    ph: "X",
    ts: 1100000,
    pid: 1,
    tid: 1,
    dur: 2000000,
    args: {
      data: {
        phase: "initial",
      },
    },
    sourceScript: "renderer.js",
  },

  // HTML Parsing phase
  {
    name: "Parse HTML",
    cat: "parser",
    ph: "X",
    ts: 1150000,
    pid: 1,
    tid: 1,
    dur: 500000,
    args: {
      data: {
        size: "1.2MB",
      },
    },
    sourceScript: "html-parser.js",
  },

  // Deep call stack for HTML parsing
  {
    name: "Tokenize",
    cat: "parser",
    ph: "X",
    ts: 1160000,
    pid: 1,
    tid: 1,
    dur: 100000,
    args: {
      data: {
        tokens: 15240,
      },
    },
    sourceScript: "html-parser.js",
  },
  {
    name: "Process Tokens",
    cat: "parser",
    ph: "X",
    ts: 1270000,
    pid: 1,
    tid: 1,
    dur: 150000,
    args: {},
    sourceScript: "html-parser.js",
  },
  {
    name: "Build DOM",
    cat: "parser",
    ph: "X",
    ts: 1430000,
    pid: 1,
    tid: 1,
    dur: 200000,
    args: {
      data: {
        nodes: 3245,
      },
    },
    sourceScript: "dom-builder.js",
  },

  // CSS Processing
  {
    name: "Process CSS",
    cat: "style",
    ph: "X",
    ts: 1700000,
    pid: 1,
    tid: 1,
    dur: 400000,
    args: {
      data: {
        stylesheets: 8,
      },
    },
    sourceScript: "css-processor.js",
  },

  // Deep call stack for CSS processing
  {
    name: "Parse Stylesheets",
    cat: "style",
    ph: "X",
    ts: 1710000,
    pid: 1,
    tid: 1,
    dur: 150000,
    args: {},
    sourceScript: "css-parser.js",
  },
  {
    name: "Compute Styles",
    cat: "style",
    ph: "X",
    ts: 1870000,
    pid: 1,
    tid: 1,
    dur: 120000,
    args: {},
    sourceScript: "style-computer.js",
  },
  {
    name: "Apply Styles",
    cat: "style",
    ph: "X",
    ts: 2000000,
    pid: 1,
    tid: 1,
    dur: 90000,
    args: {},
    sourceScript: "style-applicator.js",
  },

  // JavaScript Initialization
  {
    name: "Initialize JavaScript",
    cat: "js",
    ph: "X",
    ts: 2150000,
    pid: 1,
    tid: 1,
    dur: 800000,
    args: {
      data: {
        scripts: 24,
      },
    },
    sourceScript: "js-loader.js",
  },

  // Deep call stack for JS initialization
  {
    name: "Load Scripts",
    cat: "js",
    ph: "X",
    ts: 2160000,
    pid: 1,
    tid: 1,
    dur: 300000,
    args: {},
    sourceScript: "js-loader.js",
  },
  {
    name: "Parse Scripts",
    cat: "js",
    ph: "X",
    ts: 2470000,
    pid: 1,
    tid: 1,
    dur: 250000,
    args: {},
    sourceScript: "js-parser.js",
  },
  {
    name: "Compile Scripts",
    cat: "js",
    ph: "X",
    ts: 2730000,
    pid: 1,
    tid: 1,
    dur: 200000,
    args: {},
    sourceScript: "js-compiler.js",
  },

  // Second major phase - Content Loading (3 seconds)
  {
    name: "Content Loading",
    cat: "loading",
    ph: "X",
    ts: 3200000,
    pid: 1,
    tid: 1,
    dur: 3000000,
    args: {
      data: {
        resources: 87,
      },
    },
    sourceScript: "resource-loader.js",
  },

  // Image Loading
  {
    name: "Load Images",
    cat: "loading",
    ph: "X",
    ts: 3250000,
    pid: 1,
    tid: 1,
    dur: 1200000,
    args: {
      data: {
        count: 42,
      },
    },
    sourceScript: "image-loader.js",
  },

  // Deep call stack for image loading
  {
    name: "Fetch Images",
    cat: "network",
    ph: "X",
    ts: 3260000,
    pid: 1,
    tid: 1,
    dur: 800000,
    args: {},
    sourceScript: "fetch-manager.js",
  },
  {
    name: "Decode Images",
    cat: "loading",
    ph: "X",
    ts: 4070000,
    pid: 1,
    tid: 1,
    dur: 300000,
    args: {},
    sourceScript: "image-decoder.js",
  },
  {
    name: "Resize Images",
    cat: "loading",
    ph: "X",
    ts: 4380000,
    pid: 1,
    tid: 1,
    dur: 60000,
    args: {},
    sourceScript: "image-processor.js",
  },

  // Font Loading
  {
    name: "Load Fonts",
    cat: "loading",
    ph: "X",
    ts: 4500000,
    pid: 1,
    tid: 1,
    dur: 400000,
    args: {
      data: {
        count: 5,
      },
    },
    sourceScript: "font-loader.js",
  },

  // API Calls
  {
    name: "API Requests",
    cat: "network",
    ph: "X",
    ts: 5000000,
    pid: 1,
    tid: 1,
    dur: 1100000,
    args: {
      data: {
        endpoints: 12,
      },
    },
    sourceScript: "api-client.js",
  },

  // Deep call stack for API calls
  {
    name: "User Data",
    cat: "network",
    ph: "X",
    ts: 5010000,
    pid: 1,
    tid: 1,
    dur: 300000,
    args: {},
    sourceScript: "user-service.js",
  },
  {
    name: "Product Catalog",
    cat: "network",
    ph: "X",
    ts: 5320000,
    pid: 1,
    tid: 1,
    dur: 400000,
    args: {},
    sourceScript: "product-service.js",
  },
  {
    name: "Recommendations",
    cat: "network",
    ph: "X",
    ts: 5730000,
    pid: 1,
    tid: 1,
    dur: 350000,
    args: {},
    sourceScript: "recommendation-service.js",
  },

  // Third major phase - Rendering and Interactivity (4 seconds)
  {
    name: "Rendering & Interactivity",
    cat: "rendering",
    ph: "X",
    ts: 6300000,
    pid: 1,
    tid: 1,
    dur: 4000000,
    args: {
      data: {
        components: 156,
      },
    },
    sourceScript: "app.js",
  },

  // Component Rendering
  {
    name: "Render Components",
    cat: "rendering",
    ph: "X",
    ts: 6350000,
    pid: 1,
    tid: 1,
    dur: 1500000,
    args: {
      data: {
        count: 156,
      },
    },
    sourceScript: "component-renderer.js",
  },

  // Create an extremely deep call stack for component rendering
  // This will test vertical panning with many levels
  {
    name: "Header",
    cat: "component",
    ph: "X",
    ts: 6360000,
    pid: 1,
    tid: 1,
    dur: 100000,
    args: {},
    sourceScript: "header-component.js",
  },
  {
    name: "Navigation",
    cat: "component",
    ph: "X",
    ts: 6370000,
    pid: 1,
    tid: 1,
    dur: 80000,
    args: {},
    sourceScript: "nav-component.js",
  },
  {
    name: "NavItem",
    cat: "component",
    ph: "X",
    ts: 6375000,
    pid: 1,
    tid: 1,
    dur: 70000,
    args: {},
    sourceScript: "nav-item-component.js",
  },
  {
    name: "Dropdown",
    cat: "component",
    ph: "X",
    ts: 6380000,
    pid: 1,
    tid: 1,
    dur: 60000,
    args: {},
    sourceScript: "dropdown-component.js",
  },
  {
    name: "DropdownItem",
    cat: "component",
    ph: "X",
    ts: 6385000,
    pid: 1,
    tid: 1,
    dur: 50000,
    args: {},
    sourceScript: "dropdown-item-component.js",
  },
  {
    name: "Icon",
    cat: "component",
    ph: "X",
    ts: 6390000,
    pid: 1,
    tid: 1,
    dur: 40000,
    args: {},
    sourceScript: "icon-component.js",
  },
  {
    name: "SVG",
    cat: "component",
    ph: "X",
    ts: 6395000,
    pid: 1,
    tid: 1,
    dur: 30000,
    args: {},
    sourceScript: "svg-renderer.js",
  },
  {
    name: "Path",
    cat: "component",
    ph: "X",
    ts: 6400000,
    pid: 1,
    tid: 1,
    dur: 20000,
    args: {},
    sourceScript: "path-renderer.js",
  },

  // Main content area with deep nesting
  {
    name: "MainContent",
    cat: "component",
    ph: "X",
    ts: 6470000,
    pid: 1,
    tid: 1,
    dur: 900000,
    args: {},
    sourceScript: "main-content-component.js",
  },
  {
    name: "ProductGrid",
    cat: "component",
    ph: "X",
    ts: 6480000,
    pid: 1,
    tid: 1,
    dur: 800000,
    args: {},
    sourceScript: "product-grid-component.js",
  },
  {
    name: "ProductCard",
    cat: "component",
    ph: "X",
    ts: 6490000,
    pid: 1,
    tid: 1,
    dur: 700000,
    args: {},
    sourceScript: "product-card-component.js",
  },
  {
    name: "ImageGallery",
    cat: "component",
    ph: "X",
    ts: 6500000,
    pid: 1,
    tid: 1,
    dur: 600000,
    args: {},
    sourceScript: "image-gallery-component.js",
  },
  {
    name: "Carousel",
    cat: "component",
    ph: "X",
    ts: 6510000,
    pid: 1,
    tid: 1,
    dur: 500000,
    args: {},
    sourceScript: "carousel-component.js",
  },
  {
    name: "CarouselSlide",
    cat: "component",
    ph: "X",
    ts: 6520000,
    pid: 1,
    tid: 1,
    dur: 400000,
    args: {},
    sourceScript: "carousel-slide-component.js",
  },
  {
    name: "LazyImage",
    cat: "component",
    ph: "X",
    ts: 6530000,
    pid: 1,
    tid: 1,
    dur: 300000,
    args: {},
    sourceScript: "lazy-image-component.js",
  },
  {
    name: "ImageLoader",
    cat: "component",
    ph: "X",
    ts: 6540000,
    pid: 1,
    tid: 1,
    dur: 200000,
    args: {},
    sourceScript: "image-loader-component.js",
  },
  {
    name: "Placeholder",
    cat: "component",
    ph: "X",
    ts: 6550000,
    pid: 1,
    tid: 1,
    dur: 100000,
    args: {},
    sourceScript: "placeholder-component.js",
  },
  {
    name: "Shimmer",
    cat: "component",
    ph: "X",
    ts: 6560000,
    pid: 1,
    tid: 1,
    dur: 80000,
    args: {},
    sourceScript: "shimmer-effect-component.js",
  },
  {
    name: "Animation",
    cat: "component",
    ph: "X",
    ts: 6570000,
    pid: 1,
    tid: 1,
    dur: 60000,
    args: {},
    sourceScript: "animation-component.js",
  },
  {
    name: "Keyframes",
    cat: "component",
    ph: "X",
    ts: 6580000,
    pid: 1,
    tid: 1,
    dur: 40000,
    args: {},
    sourceScript: "keyframes-component.js",
  },
  {
    name: "Transform",
    cat: "component",
    ph: "X",
    ts: 6590000,
    pid: 1,
    tid: 1,
    dur: 20000,
    args: {},
    sourceScript: "transform-component.js",
  },

  // Event Binding
  {
    name: "Bind Events",
    cat: "js",
    ph: "X",
    ts: 7900000,
    pid: 1,
    tid: 1,
    dur: 500000,
    args: {
      data: {
        listeners: 87,
      },
    },
    sourceScript: "event-binder.js",
  },

  // Deep call stack for event binding
  {
    name: "Click Handlers",
    cat: "js",
    ph: "X",
    ts: 7910000,
    pid: 1,
    tid: 1,
    dur: 200000,
    args: {},
    sourceScript: "click-handler.js",
  },
  {
    name: "Scroll Handlers",
    cat: "js",
    ph: "X",
    ts: 8120000,
    pid: 1,
    tid: 1,
    dur: 150000,
    args: {},
    sourceScript: "scroll-handler.js",
  },
  {
    name: "Form Handlers",
    cat: "js",
    ph: "X",
    ts: 8280000,
    pid: 1,
    tid: 1,
    dur: 100000,
    args: {},
    sourceScript: "form-handler.js",
  },

  // Layout and Paint
  {
    name: "Layout",
    cat: "rendering",
    ph: "X",
    ts: 8500000,
    pid: 1,
    tid: 1,
    dur: 600000,
    args: {
      data: {
        nodes: 3245,
      },
    },
    sourceScript: "layout-engine.js",
  },

  // Deep call stack for layout
  {
    name: "Compute Layout",
    cat: "rendering",
    ph: "X",
    ts: 8510000,
    pid: 1,
    tid: 1,
    dur: 400000,
    args: {},
    sourceScript: "layout-computer.js",
  },
  {
    name: "Position Elements",
    cat: "rendering",
    ph: "X",
    ts: 8520000,
    pid: 1,
    tid: 1,
    dur: 300000,
    args: {},
    sourceScript: "element-positioner.js",
  },
  {
    name: "Calculate Sizes",
    cat: "rendering",
    ph: "X",
    ts: 8530000,
    pid: 1,
    tid: 1,
    dur: 200000,
    args: {},
    sourceScript: "size-calculator.js",
  },
  {
    name: "Apply Flexbox",
    cat: "rendering",
    ph: "X",
    ts: 8540000,
    pid: 1,
    tid: 1,
    dur: 150000,
    args: {},
    sourceScript: "flexbox-calculator.js",
  },
  {
    name: "Apply Grid",
    cat: "rendering",
    ph: "X",
    ts: 8550000,
    pid: 1,
    tid: 1,
    dur: 100000,
    args: {},
    sourceScript: "grid-calculator.js",
  },

  // Paint
  {
    name: "Paint",
    cat: "rendering",
    ph: "X",
    ts: 9200000,
    pid: 1,
    tid: 1,
    dur: 700000,
    args: {
      data: {
        layers: 42,
      },
    },
    sourceScript: "paint-engine.js",
  },

  // Deep call stack for paint
  {
    name: "Rasterize",
    cat: "rendering",
    ph: "X",
    ts: 9210000,
    pid: 1,
    tid: 1,
    dur: 500000,
    args: {},
    sourceScript: "rasterizer.js",
  },
  {
    name: "Draw Backgrounds",
    cat: "rendering",
    ph: "X",
    ts: 9220000,
    pid: 1,
    tid: 1,
    dur: 400000,
    args: {},
    sourceScript: "background-painter.js",
  },
  {
    name: "Draw Text",
    cat: "rendering",
    ph: "X",
    ts: 9230000,
    pid: 1,
    tid: 1,
    dur: 300000,
    args: {},
    sourceScript: "text-painter.js",
  },
  {
    name: "Draw Borders",
    cat: "rendering",
    ph: "X",
    ts: 9240000,
    pid: 1,
    tid: 1,
    dur: 200000,
    args: {},
    sourceScript: "border-painter.js",
  },
  {
    name: "Apply Effects",
    cat: "rendering",
    ph: "X",
    ts: 9250000,
    pid: 1,
    tid: 1,
    dur: 150000,
    args: {},
    sourceScript: "effects-painter.js",
  },
  {
    name: "Composite Layers",
    cat: "rendering",
    ph: "X",
    ts: 9260000,
    pid: 1,
    tid: 1,
    dur: 100000,
    args: {},
    sourceScript: "layer-compositor.js",
  },

  // Final phase - Page Ready
  {
    name: "Page Ready",
    cat: "load",
    ph: "X",
    ts: 10000000,
    pid: 1,
    tid: 1,
    dur: 100000,
    args: {
      data: {
        status: "complete",
      },
    },
    sourceScript: "page-lifecycle.js",
  },

  // Add many small events to create a dense visualization
  // Generate 100 small events spread across the timeline
  ...[...Array(100)].map((_, i) => ({
    name: `Event ${i}`,
    cat: "misc",
    ph: "X",
    ts: 1000000 + i * 90000,
    pid: 1,
    tid: 1,
    dur: 10000 + Math.random() * 30000,
    args: {
      data: {
        id: i,
      },
    },
    sourceScript: `event-${i % 10}.js`,
  })),

  // Add a very deep call stack to test extreme depths
  // This creates a stack that goes 30 levels deep
  ...[...Array(30)].map((_, i) => ({
    name: `DeepStack_L${i}`,
    cat: "deep",
    ph: "X",
    ts: 5000000 + i * 5000,
    pid: 1,
    tid: 1,
    dur: 300000 - i * 9000,
    args: {
      data: {
        depth: i,
      },
    },
    sourceScript: "deep-stack.js",
  })),

  // Add parallel events to test horizontal density
  // These events all happen at the same time but at different depths
  ...[...Array(20)].map((_, i) => ({
    name: `Parallel_${i}`,
    cat: "parallel",
    ph: "X",
    ts: 7000000,
    pid: 1,
    tid: 1,
    dur: 200000,
    args: {
      data: {
        thread: i,
      },
    },
    sourceScript: "parallel-processor.js",
  })),
]
